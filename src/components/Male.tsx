/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Male2.glb -o src/components/Male.tsx -r public 
*/

import * as THREE from "three";
import React, { useState, useEffect } from "react";
import { PivotControls, useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Tattoo } from "./Tattoo";
import { bodyParts, maleBodyPartConfigs } from "@/helper/bodyPart";
import { optionValue } from "@/helper/optionValue";

// Define the custom prop type
type MaleProps = JSX.IntrinsicElements["group"] & {
  toggleDebug?: boolean;
  togglePivot?: boolean;
  uploadedImages?: any;
};

const parts = [
  "Forehead",
  "Ocipital",
  "LeftShoulder",
  "RightShoulder",
  "Chest",
  "Abdomen",
  "Back",
  "LeftArm",
  "RightArm",
  "LeftLeg",
  "RightLeg",
];

type GLTFResult = GLTF & {
  nodes: {
    Mannequin_ML: THREE.Mesh;
  };
  materials: {
    ["uv.003"]: THREE.MeshStandardMaterial;
  };
};

export function Male({
  toggleDebug = false,
  togglePivot = false,
  uploadedImages,
  ...props
}: MaleProps) {
  const { nodes, materials } = useGLTF("/models/Male.glb") as GLTFResult;
  const defaultMaterial = "./test.jpg";
  const [pos, setXYZ] = useState<[number, number, number]>([0, 1, 0.1]);
  const [scl, setScl] = useState<[number, number, number]>([0.3, 0.3, 0.1]);
  const [rot, setRot] = useState<[number, number, number]>([0, 0, 0]);

  useEffect(() => {
    console.log(uploadedImages['Forehead']);
  });

  return (
    <group {...props} dispose={null} scale={[1, 1, 1]}>
      <mesh
        geometry={nodes.Mannequin_ML.geometry}
        material={materials["uv.003"]}
        material-aoMapIntensity={1}
      >
        <group>
          <PivotControls
            scale={0.55}
            activeAxes={[true, true, true]}
            offset={[0.5, 1, 0]}
            visible={togglePivot}
            onDrag={(local) => {
              const position = new THREE.Vector3();
              const scale = new THREE.Vector3();
              const quaternion = new THREE.Quaternion();
              local.decompose(position, quaternion, scale);
              const rotation = new THREE.Euler().setFromQuaternion(quaternion);
              setXYZ([position.x, position.y + 1, position.z + 0.1]);
              setScl([0.3 * scale.x, 0.3 * scale.y, 0.1 * scale.z]);
              setRot([rotation.x, rotation.y, rotation.z]);
            }}
          />
        </group>
        <Tattoo
          position={pos}
          rotation={rot}
          scale={scl}
          debugMode={toggleDebug}
          tattoo={useTexture(defaultMaterial)}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/Male.glb");
